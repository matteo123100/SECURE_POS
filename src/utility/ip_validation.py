"""
    Module for IPv4 and IPv6 validation
"""
import re

ipv4_re0 = "^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}" \
         "(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$"
ipv4_re1 = "^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}" \
        "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$"

ipv6_re0 = "(?:^|(?<=\s))(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|" \
           "([0-9a-fA-F]{1,4}:){1,7}:|" \
           "([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|" \
           "([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|" \
           "([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|" \
           "([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|" \
           "([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|" \
           "[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|" \
           ":((:[0-9a-fA-F]{1,4}){1,7}|:)|" \
           "fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|" \
           "::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|" \
           "(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|" \
           "(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|" \
           "([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|" \
           "1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|" \
           "1{0,1}[0-9]){0,1}[0-9]))(?=\s|$)"


def ipv4_tester(trg_ip4: str) -> bool:
    ipv4_p0 = re.compile(ipv4_re0)
    ipv4_p1 = re.compile(ipv4_re1)
    if re.search(ipv4_p0, trg_ip4) and re.search(ipv4_p1, trg_ip4):
        return True
    else:
        return False


def ipv6_tester(trg_ip6: str) -> bool:
    ipv6_p0 = re.compile(ipv6_re0)
    if re.search(ipv6_p0, trg_ip6):
        return True
    else:
        return False
